worker_processes  4;

events {
    worker_connections  4096;
}

http {
    resolver 114.114.114.114 ipv6=off;
    charset UTF-8;

    include     ./mime.types;

    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  ./logs/access.log  main;
    error_log ./logs/error.log info;

    sendfile        on;
    keepalive_timeout  65;


    #----------------------------Orange config-----------------------------
    lua_package_path './orange/?.lua;./dashboard/?.lua;/usr/local/lor/?.lua;;';
    lua_code_cache on;

    lua_shared_dict status 1m;


    init_by_lua_block {
        local config_file = "./orange.conf"
        orange = require("orange.orange")
        store = orange.init({
            config = config_file
        })
    }

    init_worker_by_lua_block {
      orange.init_worker()
    }


    server {
        listen       9999;
        #server_name  localhost;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
    
        location / {
            set $upstream_host nil;
            set $upstream_url nil;

            rewrite_by_lua_block {
                orange.redirect()
                orange.rewrite()
            }

            access_by_lua_block {
                orange.access()
            }

            # Proxy the request
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Scheme $scheme;
            proxy_set_header Host $upstream_host;
            proxy_pass $upstream_url;
            proxy_pass_header Server;

            header_filter_by_lua_block {
                orange.header_filter()
            }

            body_filter_by_lua_block {
                orange.body_filter()
            }

            log_by_lua_block {
                orange.log()
            }

            # location / {
            #     content_by_lua_block {
            #         ngx.say("This is the final result \n host: " .. ngx.var.host .. " uri: " .. ngx.var.uri)
            #     }
            # }
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }

        error_page 500 502 503 504 /50x;

        location = /50x {
            internal;
            content_by_lua_block {
                ngx.say("5xx Error...")
            }
        }


        # dashboard的静态文件
        location ~* /orange/static/(.*) {
            alias ./dashboard/static/$1;
        }
      
        location /orange/dashboard {
            set $template_root '';
            content_by_lua_block {
                require("dashboard.main")(store)
            }
        }
    }
}
