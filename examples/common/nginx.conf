worker_processes  4;

events {
    worker_connections  4096;
}

http {
    charset UTF-8;
    include ../../conf/mime.types;

    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  ./logs/access.log  main;
    error_log ./logs/error.log info;

    sendfile        on;
    keepalive_timeout  65;

    upstream my_server {
        server localhost:8001;
    }


    #----------------------------Orange configuration-----------------------------
    lua_package_path '../../?.lua;/usr/local/lor/?.lua;;';
    lua_code_cache on;

    lua_shared_dict status 1m; # used for url statistic


    init_by_lua_block {
        local config_file = "./orange.conf"
        local orange = require("orange.orange")
        local store = orange.init({
            config = config_file
        })

        -- the orange context
        context = {
            orange = orange, 
            store = store
        }
    }

    init_worker_by_lua_block {
        local orange = context.orange
        orange.init_worker()
    }

    # main server
    server {
        listen       80;
        #server_name  localhost;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
    
        location / {
            rewrite_by_lua_block {
                local orange = context.orange
                orange.redirect()
                orange.rewrite()
            }

            access_by_lua_block {
                local orange = context.orange
                orange.access()
            }

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Scheme $scheme;
            proxy_set_header Host $host;
            proxy_pass http://my_server;

            header_filter_by_lua_block {
                local orange = context.orange
                orange.header_filter()
            }

            body_filter_by_lua_block {
                local orange = context.orange
                orange.body_filter()
            }

            log_by_lua_block {
                local orange = context.orange
                orange.log()
            }
        }
    }

    # some other server, config it as you wanted
    server {
        listen 8001;
        server_name localhost;
        access_log ./logs/my_server_access.log main;
        error_log ./logs/my_server_error.log;
        location / {
            content_by_lua_block {
                ngx.say("welcome to my server")
            }
        }
    }

    # orange dashboard server
    server {
        listen       9999;
        #server_name  localhost;
        access_log ./logs/orange_access.log main;
        error_log ./logs/orange_error.log;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }


        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }


        # dashboard的静态文件
        location ~* /orange/static/(.*) {
            alias ../../dashboard/static/$1;
        }
      
        location / {
            set $template_root '';
            content_by_lua_block {
                require("dashboard.main")(context.store, "../../dashboard/views")
            }
        }
    }
}
