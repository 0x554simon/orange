worker_processes  4;

events {
    worker_connections  4096;
}

http {
    include     ./mime.types;

    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  ./logs/access.log  main;

    sendfile        on;
    keepalive_timeout  65;


    #----------------------------Orange config-----------------------------
    lua_package_path './orange/?.lua;./dashboard/?.lua;/usr/local/lor/?.lua;;';
    lua_code_cache off;

    lua_shared_dict status 1m;


    init_by_lua_block {
        local config_file = "./orange.conf"
        orange = require("orange.orange")
        orange.init({
            config = config_file
        })
    }

    init_worker_by_lua_block {
      orange.init_worker()
    }


    server {
        listen       9999;
        #server_name  localhost;

        access_log  ./logs/orange.access.log  main;


        if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})") {
            set $year $1;
            set $month $2;
            set $day $3;
            set $hour $4;
            set $minutes $5;
            set $seconds $6;
        }
    
        location / {
            set $upstream_host nil;
            set $upstream_url nil;

            rewrite_by_lua_block {
                orange.redirect()
                orange.rewrite()
            }

            access_by_lua_block {
                orange.access()
            }

            # Proxy the request
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Scheme $scheme;
            # proxy_set_header Host $upstream_host;
            # proxy_pass $upstream_url;
            # proxy_pass_header Server;

            # Add additional response headers
            header_filter_by_lua_block {
                orange.header_filter()
            }

            body_filter_by_lua_block {
                orange.body_filter()
            }

            log_by_lua_block {
                orange.log()
            }

            # just for test.
            location / {
                content_by_lua_block {
                    ngx.say(ngx.var.uri .. ":" .. ngx.var.host)
                }
            }
        }

        
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        # dashboard的静态文件
        location ~* /orange/static/(.*) {
            alias ./dashboard/static/$1;
        }
      
        location /orange/dashboard {
            set $template_root '';
            content_by_lua_file ./dashboard/main.lua;
        }

        

    }
}
